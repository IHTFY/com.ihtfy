{"slug":"mandelbrot","title":"Mandelbrot","date":"2022-03-06T00:00:00.000Z","excerpt":"Updating the description of my Mandelbrot fractal viewer","tags":["math","code"],"html":"<p>In my <a href=\"/fractal\">fractal post</a>, I mentioned I need to fix my mandelbrot fractal viewer. I still need to do this; I’d like to get the original paper’s method to work. The current version is based on a shadertoy example which relies on picking a cyclic point as reference.</p>\n<p>I just changed the README on github, because I think I messed up saying 16-bits and 16-digits. I also noticed a source saying one of the 53 bits is actually for signature. I thought that was part of the 11. I think the exponent part is still wrong, but I’m not sure - need to see when things are in base 2 versus 10.</p>\n<p>I kind of gave up on it for a while because <a href=\"http://www.chillheimer.de/kallesfraktaler/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">Kalles Fraktaler</a>, works so much better and faster and includes lots of other optimizations, glitch fixes, and styling options.</p>","css":{"code":"","map":null},"head":"","readingTime":"1 min read","relatedPosts":[{"slug":"mathjax","title":"MathJax","date":"2022-05-24T00:00:00.000Z","excerpt":"You can write math in GitHub ReadMes now.","tags":["math","code"],"html":"<h1 id=\"math-on-github\">Math on GitHub<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#math-on-github\"><span class=\"heading-link\">#</span></a></h1>\n<p>I was looking at my <a href=\"https://github.com/IHTFY/mandelbrot\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">mandelbrot project</a>, and I was wondering if I could better format the math. After googling around, I found a few hacks: open APIs to generate SVG or PNG math images, a hack to use Jupyter notebook on github, and some other stuff.</p>\n<p>Looking through some old GitHub supoprt tickets, they kept saying it’s not supported. But just 5 days ago, <a href=\"https://github.blog/2022-05-19-math-support-in-markdown/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">they finally added it</a>.</p>\n<p>It’s nice that they added that.</p>\n<h1 id=\"where-were-you\">Where were you?<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#where-were-you\"><span class=\"heading-link\">#</span></a></h1>\n<p>Also, I realize I’ve totally failed on my daily posts, as well as weekly posts, and weekly videos. I’ve been going to the gym regularly at least.</p>\n<p>I was able to get ihtfy.com approved for google adsense, so I may add ads to some of my projects at some point.</p>\n<p>I do still plan on making YouTube videos.</p>\n<p>I’m realizing as I write this post, it’s not quite as simple to create a posts as the WordPress setup. Writing in markdown is fine, but manually creating the appropriate file structure, asset folder, optimized images, is a bit of a pain. But I do like that I can customize everything and even include scripts and other packages if I want.</p>","css":{"code":"","map":null},"head":"","readingTime":"2 min read"},{"slug":"schema","title":"Schema","date":"2022-03-26T00:00:00.000Z","excerpt":"I'm working on the IQ test again.","tags":["code","math"],"html":"<p>I’m working on the IQ test again. I’ll have to work on the best way to represent rules, and configuration for different graphics. Basically, I think I will have a 3x3 array, filled with blank config files - maybe they will have indexes and neighbor references. Then I will apply rules to this array, modifying the config files. The config files will be able to define a graphic, like a grid with shapes, nested shapes, dot patterns etc.</p>\n<p>The answer choices will have random parameters tweaked in this process, like modified rule numeric values or starting index.</p>\n<p>The other day, I made a function to return an arbitrary diagonal of a matrix.</p>\n<div class=\"code-block svelte-y16rmy\"><div class=\"filename svelte-y16rmy\">utils.js</div>\n\t<div class=\"lang svelte-y16rmy\">javascript</div>\n\t<pre class=\"language-javascript\"><!-- HTML_TAG_START --><code class=\"language-javascript\"><span class=\"token comment\">/**\n * The range of % is (-n, n). positiveMode restricts the range to [0, n).\n *\n * @param &#123;a value&#125; x\n * @param &#123;the modulus&#125; n\n * @returns x mod n | x ϵ [0,n)\n */</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">positiveMod</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> n</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">%</span> n<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> n<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> n<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Pick a diagonal from a grid.\n *\n * @param &#123;3x3 grid&#125; grid\n * @param &#123;column index of first element&#125; diagonalIndex\n * @param &#123;1: right, -1: left&#125; direction\n * @returns &#123;array of elements in the diagonal, starting at the given index moving down and in the given direction&#125;\n */</span>\n\n<span class=\"token comment\">/**\n * 1 2 3  -1 -2 -3\n * 3 1 2  -2 -3 -1\n * 2 3 1  -3 -1 -2\n */</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getDiagonal</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">grid<span class=\"token punctuation\">,</span> diagonalIndex<span class=\"token punctuation\">,</span> direction</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>diagonalIndex <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tdiagonalIndex <span class=\"token operator\">=</span> <span class=\"token function\">positiveMod</span><span class=\"token punctuation\">(</span>diagonalIndex<span class=\"token punctuation\">,</span> grid<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">const</span> output <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> grid<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\toutput<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token function\">positiveMod</span><span class=\"token punctuation\">(</span>diagonalIndex <span class=\"token operator\">+</span> direction <span class=\"token operator\">*</span> i<span class=\"token punctuation\">,</span> grid<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> output<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></code><!-- HTML_TAG_END --></pre>\n</div>","css":{"code":".code-block.svelte-y16rmy.svelte-y16rmy{display:block;position:relative;background-color:var(--code-background-color);color:var(--code-text-color);font-family:var(--mono-font);font-size:1rem;line-height:1.33em;border-radius:8px;box-shadow:var(--neumorphic-shading-concave), var(--neumorphic-shadow);padding:30px 15px;margin:30px 0}.code-block.svelte-y16rmy pre{overflow-x:auto;scrollbar-color:var(--primary-color) var(--scrollbar-track-color);scrollbar-width:thin;padding-bottom:5px}.code-block.svelte-y16rmy pre::-webkit-scrollbar{height:8px}.code-block.svelte-y16rmy pre::-webkit-scrollbar-thumb{background:var(--primary-color)}.code-block.svelte-y16rmy pre::-webkit-scrollbar-thumb:hover{background:var(--primary-light-color)}.code-block.svelte-y16rmy .filename.svelte-y16rmy{background:inherit;border-radius:8px;margin-bottom:-2px;padding:5px 10px;position:absolute;left:0px;top:-16px;z-index:1;box-shadow:var(--neumorphic-shading-convex), var(--neumorphic-shadow)}.code-block.svelte-y16rmy .lang.svelte-y16rmy{position:absolute;right:0;top:-16px;background:inherit;border-radius:8px;padding:5px 10px;z-index:2;font-size:0.85em;box-shadow:var(--neumorphic-shading-convex), var(--neumorphic-shadow)}","map":null},"head":"","readingTime":"3 min read"},{"slug":"matrices","title":"Matrices","date":"2022-03-20T00:00:00.000Z","excerpt":"Thoughts about Raven's Progressive Matrices","tags":["math","code"],"html":"<p>There’s a type of puzzle called a Raven’s Matrix. It was developed as a type of IQ test, but I remember doing it in elementary school. There’s a free IQ test from Mensa Norway you can try: <a href=\"https://test.mensa.no\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">test.mensa.no</a></p>\n<p>I thought it would be fun to make a web app that generates these matrices. There’s a very basic version I found <a href=\"https://www.caseyrule.com/projects/pattern-puzzle\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">here</a>. Basically just a few shapes, different fill colors, and border styles, and sometimes a nested shape.</p>\n<p><a href=\"https://link.springer.com/content/pdf/10.3758/BRM.42.2.525.pdf\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">This</a> is a paper from Sandia National Labs in 2009 which describes some of the patterns used to create the matrices. The implementation is public <a href=\"https://github.com/LauraMatzen/Matrices\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">here</a>, but it uses an old version of Java and I didn’t feel like getting that to run. It also includes sample output from the program, and you can see it’s not as visually diverse as the Norway test.</p>\n<p>I find these types of puzzles pretty simple once you notice the handful of rules used to create them. Some of the most common things are rotating an element, combining rows/columns, overlaying and applying XOR (exclusive OR, meaning it can’t be both), AND, or some other boolean operation, as well as recognizing when theses rules are combined with each and very often row-shifted.</p>\n<table><thead><tr><th>Straight Down</th>\n<th>Down and Right</th></tr></thead>\n<tbody><tr><td>123</td>\n<td>123</td></tr>\n<tr><td>123</td>\n<td>312</td></tr>\n<tr><td>123</td>\n<td>231</td></tr></tbody></table>\n<p>This shifting can happen vertically or in the opposite direction as well. Notice how the numbers form diagonals rather than columns.</p>\n<p>Another common operation is to simply interpret sub elements in a cell as numbers and then add or subtract them to calculate the cell in the final row/column.</p>\n<p>It would be cool to gather people’s raw scores and then calculate the mean and deviation to be able to normalize it and give an IQ score. I could also give explanations for each puzzle at the end since they’re created with simple rules.</p>\n<table><thead><tr><th>flip horizontally⟶</th>\n<th>rotate 180° ⟶</th>\n<th></th></tr></thead>\n<tbody><tr><td>b</td>\n<td>d</td>\n<td>p</td></tr>\n<tr><td>u</td>\n<td>u</td>\n<td>n</td></tr>\n<tr><td>5</td>\n<td>S</td>\n<td></td></tr></tbody></table>\n<p>For example, this puzzle take the first column, then flips horizontally to get the second column, then rotates 180° to get the final column. So the solution takes “5” flips horizontally to become “S”, then rotates 180° to get “S” again.</p>","css":{"code":"","map":null},"head":"","readingTime":"2 min read"}]}