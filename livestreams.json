{"slug":"livestreams","title":"livestreams","date":"2022-02-04T00:00:00.000Z","excerpt":"How to save livestreams.","tags":["code","tutorial"],"html":"<p>This is somewhat related to my <a href=\"https://blog.ihtfy.com/post/soundcloud-likes/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">previous post</a> about downloading all of my SoundCloud liked songs. I have another batch file that I use to save livestreams. It doesn’t work for YouTube livestreams and probably not Twitch either. Often news sites or other random sites will work.</p>\n<p>Go to the stream and open your internet browser’s developer tools - in Chrome, <code>ctrl</code> + <code>shift</code> + <code>j</code>. Click the “Network” tab. You can optionally filter to the “Fetch/XHR” traffic as well. Now, refresh the page and click play on the video if necessary. You will hopefully find a file that ends in .m3u8. Common filenames are <code>index.m3u8</code>, <code>playlist.m3u8</code>, or <code>manifest.m3u8</code>. Sometimes the file extension is just .m3u.</p>\n<p>This is a playlist file which contains a list of “links” to the most recent chunks of video from the livestream. Often it will contain 3-5 chunks, and gets updated every few seconds. If you click on the file once, then click on the “Response” or “Preview” tab, you’ll see the contents of the file. For Example:</p>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/livestreams/m3u8-snapshot.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/livestreams/m3u8-snapshot.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/livestreams/m3u8-snapshot.png\" alt=\"network\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n\t\n\t\t<figcaption><!-- HTML_TAG_START -->network<!-- HTML_TAG_END --></figcaption>\n</picture>\n<p>An m3u8 file</p>\n<p>In this case, the individual video chunks are .ts files. Each chunk is 2 seconds long. The path to the files are relative, because they don’t start with “https” or a valid URL. This is fine, but it means we can’t simply download the .m3u8 and use it because these .ts files will not be found. We’ll use a link to this m3u8 file instead.</p>\n<p>Right click on the <code>index.m3u8</code> &gt; Copy &gt; Copy link address. Save this for later.</p>\n<p>We’re going to make a batch file that takes an URL to an m3u8 file and saves a video, but first we’ll need to have <a href=\"https://ffmpeg.org/download.html\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">FFmpeg</a> installed.</p>\n<p>FFmpeg is another command line tool to convert videos and tons of <a href=\"https://ffmpeg.org/about.html\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">other manipulation</a>. It’s free, very powerful, and used in almost every video conversion tool you’ve ever used.</p>\n<p>I’m on Windows, so I downloaded the .exe. I would recommend putting it in your Path again. Instructions for that are at the bottom of my <a href=\"https://blog.ihtfy.com/post/soundcloud-likes/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">SoundCloud post</a>. Adding the folder with the ffmpeg.exe will allow you to run FFmpeg by typing <code>ffmpeg</code> in the command line. It’s possible the installation will add it to your path anyway, but you may need to restart your computer for it to take effect.</p>\n<p>Next, we’ll make the batch file. Make a new text file and add this inside of it:</p>\n<div class=\"code-block svelte-1w2kx1p\"><div class=\"filename svelte-1w2kx1p\">streamDL.bat</div>\n\t<div class=\"lang svelte-1w2kx1p\">batch</div>\n\t<pre class=\"language-batch\"><!-- HTML_TAG_START --><code class=\"language-batch\"><span class=\"token operator\">@</span><span class=\"token command\"><span class=\"token keyword\">ECHO</span> OFF</span>\n<span class=\"token command\"><span class=\"token keyword\">SET</span> <span class=\"token parameter attr-name\">/p</span> <span class=\"token variable\">url</span><span class=\"token operator\">=</span>Stream Link: </span>\n<span class=\"token command\"><span class=\"token keyword\">SET</span> <span class=\"token parameter attr-name\">/p</span> <span class=\"token variable\">name</span><span class=\"token operator\">=</span>Filename: </span>\n<span class=\"token command\"><span class=\"token keyword\">ECHO</span> saving in downloads</span>\n<span class=\"token command\"><span class=\"token keyword\">START</span> ffmpeg -protocol_whitelist file,http,https,tcp,tls,crypto <span class=\"token parameter attr-name\">-i</span> <span class=\"token string\">\"%URL%\"</span> -codec copy <span class=\"token string\">\"C:\\Users\\Frankie\\Downloads\\%name%.mkv\"</span></span></code><!-- HTML_TAG_END --></pre>\n</div>\n<p>You can change the path on the last line. The <code>%name%</code> is a variable which comes from the prompt in line 3. I’m saving as an <code>mkv</code> file, but you could change this to mp4 or something else; from what I recall, it may be faster to save as an mkv.</p>\n<p>Save that text file as a <code>.bat</code> file, like <code>streamDL.bat</code>. Now if you double-click it, it will as you to paste in the stream link that you copied before. Next add a filename - no file extension needed. Then it runs the ffmpeg command:</p>\n<div class=\"code-block svelte-1w2kx1p\"><div class=\"filename svelte-1w2kx1p\">streamDL.bat</div>\n\t<div class=\"lang svelte-1w2kx1p\">batch</div>\n\t<pre class=\"language-batch\"><!-- HTML_TAG_START --><code class=\"language-batch\"><span class=\"token command\"><span class=\"token keyword\">ffmpeg</span> -protocol_whitelist file,http,https,tcp,tls,crypto <span class=\"token parameter attr-name\">-i</span> <span class=\"token string\">\"%URL%\"</span> -codec copy <span class=\"token string\">\"yourFilename.mkv\"</span></span></code><!-- HTML_TAG_END --></pre>\n</div>\n<p>The important part here is the <code>-protocol_whitelist file,http,https,tcp,tls,crypto</code> argument with lets FFmpeg read the .ts files using https or http.</p>\n<p>FFmpeg will automatically keep checking the m3u8 file and get the new ts files while the stream is running. If you go to the downloaded video file, you can refresh windows explorer and see that the file size is increasing.</p>","css":{"code":"picture.svelte-1gy5t1o.svelte-1gy5t1o{position:relative;width:100%;height:100%}picture.svelte-1gy5t1o img.svelte-1gy5t1o{width:100%;height:100%}\n.code-block.svelte-1w2kx1p.svelte-1w2kx1p{display:block;position:relative;background-color:var(--code-background-color);color:var(--code-text-color);font-family:var(--mono-font);font-size:1rem;line-height:1.33em;border-radius:8px;box-shadow:var(--shadow);padding:30px 15px;margin:30px 0}.code-block.svelte-1w2kx1p pre{overflow-x:auto;scrollbar-color:var(--primary-color) var(--scrollbar-track-color);scrollbar-width:thin;padding-bottom:5px}.code-block.svelte-1w2kx1p pre::-webkit-scrollbar{height:8px}.code-block.svelte-1w2kx1p pre::-webkit-scrollbar-thumb{background:var(--primary-color)}.code-block.svelte-1w2kx1p pre::-webkit-scrollbar-thumb:hover{background:var(--primary-light-color)}.code-block.svelte-1w2kx1p .lang.svelte-1w2kx1p{position:absolute;right:0;top:-15px;background:inherit;border-radius:8px;padding:5px 10px;z-index:2;font-size:0.85em}.code-block.svelte-1w2kx1p .filename.svelte-1w2kx1p{background:inherit;border-top-left-radius:8px;border-top-right-radius:8px;margin-bottom:-2px;padding:5px 10px;position:absolute;left:0px;top:-15px;z-index:1}","map":null},"head":"","readingTime":"4 min read","relatedPosts":[{"slug":"compression","title":"compression","date":"2022-02-13T00:00:00.000Z","excerpt":"How LZ string compression works","tags":["code","tutorial"],"html":"<p>TODO Make these tables look nicer. <code>\\src\\lib\\scss\\base.scss</code></p>\n<p>I was getting a warning on a coding project that each page was more than 1MB in size. The data is a list of coordinates, stored as a big string. I was able to reduce the size of the data to 20% the original size by rounding to whole numbers. Then I used <a href=\"https://www.npmjs.com/package/lz-string\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">this LZ compression library</a> to reduce it to 5% the orignal size.</p>\n<p>LZ is a lossless compression algorithm, which means you get the exact original input when you decompress. It works by:</p>\n<ol><li>List all the characters used by the data and store it in “dictionary”</li>\n<li>For the next chunk of data to encode, find the longest “word” in the dictionary that matches</li>\n<li>Store the dictionary index (the order the word appears) as the next chunk of encoded data</li>\n<li>Add the original chunk plus the next character as a new dictionary word</li>\n<li>Go to Step 2. until all data is encoded</li></ol>\n<p>If you wanted to compress the string “OROMEOROMEO”</p>\n<p>You would get all the individual characters used and add them to the dictionary:</p>\n<table><thead><tr><th>Input</th>\n<th>Dictionary</th>\n<th>Output</th></tr></thead>\n<tbody><tr><td>OROMEOROMEO</td>\n<td>1. O</td>\n<td></td></tr>\n<tr><td></td>\n<td>2. R</td>\n<td></td></tr>\n<tr><td></td>\n<td>3. M</td>\n<td></td></tr>\n<tr><td></td>\n<td>4. E</td>\n<td></td></tr></tbody></table>\n<p>Initialize the Dictionary</p>\n<p>Next, we find the longest word that matches our remaining string, which is just “O”, since there is no word starting with “OR”.</p>\n<p>Then, we encode it as the index (1)</p>\n<table><thead><tr><th>Input</th>\n<th>Dictionary</th>\n<th>Output</th></tr></thead>\n<tbody><tr><td>ROMEOROMEO</td>\n<td>1. O</td>\n<td>1</td></tr>\n<tr><td></td>\n<td>2. R</td>\n<td></td></tr>\n<tr><td></td>\n<td>3. M</td>\n<td></td></tr>\n<tr><td></td>\n<td>4. E</td>\n<td></td></tr></tbody></table>\n<p>Next, we add “OR” to our dictionary. If we had had that entry in our last step, we could’ve encoded more data and saved more space. We add it now so that we can make use of it in the future.</p>\n<table><thead><tr><th>Input</th>\n<th>Dictionary</th>\n<th>Output</th></tr></thead>\n<tbody><tr><td>ROMEOROMEO</td>\n<td>1. O</td>\n<td>1</td></tr>\n<tr><td></td>\n<td>2. R</td>\n<td></td></tr>\n<tr><td></td>\n<td>3. M</td>\n<td></td></tr>\n<tr><td></td>\n<td>4. E</td>\n<td></td></tr>\n<tr><td></td>\n<td>5. OR</td>\n<td></td></tr></tbody></table>\n<p>Now, we repeat the process. Our next chunk is just “R”, since “RO” isn’t in the dictionary. We store 2 as output, remove the input, and add “RO” to the dictionary</p>\n<table><thead><tr><th>Input</th>\n<th>Dictionary</th>\n<th>Output</th></tr></thead>\n<tbody><tr><td>OMEOROMEO</td>\n<td>1. O</td>\n<td>1,2</td></tr>\n<tr><td></td>\n<td>2. R</td>\n<td></td></tr>\n<tr><td></td>\n<td>3. M</td>\n<td></td></tr>\n<tr><td></td>\n<td>4. E</td>\n<td></td></tr>\n<tr><td></td>\n<td>5. OR</td>\n<td></td></tr>\n<tr><td></td>\n<td>6. RO</td>\n<td></td></tr></tbody></table>\n<p>Next, we encode “O”, since “OM” isn’t in the dictionary.</p>\n<table><thead><tr><th>Input</th>\n<th>Dictionary</th>\n<th>Output</th></tr></thead>\n<tbody><tr><td>MEOROMEO</td>\n<td>1. O</td>\n<td>1,2,1</td></tr>\n<tr><td></td>\n<td>2. R</td>\n<td></td></tr>\n<tr><td></td>\n<td>3. M</td>\n<td></td></tr>\n<tr><td></td>\n<td>4. E</td>\n<td></td></tr>\n<tr><td></td>\n<td>5. OR</td>\n<td></td></tr>\n<tr><td></td>\n<td>6. RO</td>\n<td></td></tr>\n<tr><td></td>\n<td>7. OM</td>\n<td></td></tr></tbody></table>\n<p>Next, “M” is encoded since “ME” isn’t listed.</p>\n<table><thead><tr><th>Input</th>\n<th>Dictionary</th>\n<th>Output</th></tr></thead>\n<tbody><tr><td>EOROMEO</td>\n<td>1. O</td>\n<td>1,2,1,3</td></tr>\n<tr><td></td>\n<td>2. R</td>\n<td></td></tr>\n<tr><td></td>\n<td>3. M</td>\n<td></td></tr>\n<tr><td></td>\n<td>4. E</td>\n<td></td></tr>\n<tr><td></td>\n<td>5. OR</td>\n<td></td></tr>\n<tr><td></td>\n<td>6. RO</td>\n<td></td></tr>\n<tr><td></td>\n<td>7. OM</td>\n<td></td></tr>\n<tr><td></td>\n<td>8. ME</td>\n<td></td></tr></tbody></table>\n<p>Next, “E” is encoded as “4” since “EO” isn’t in the dictionary, but we’ll add it.</p>\n<table><thead><tr><th>Input</th>\n<th>Dictionary</th>\n<th>Output</th></tr></thead>\n<tbody><tr><td>OROMEO</td>\n<td>1. O</td>\n<td>1,2,1,3,4</td></tr>\n<tr><td></td>\n<td>2. R</td>\n<td></td></tr>\n<tr><td></td>\n<td>3. M</td>\n<td></td></tr>\n<tr><td></td>\n<td>4. E</td>\n<td></td></tr>\n<tr><td></td>\n<td>5. OR</td>\n<td></td></tr>\n<tr><td></td>\n<td>6. RO</td>\n<td></td></tr>\n<tr><td></td>\n<td>7. OM</td>\n<td></td></tr>\n<tr><td></td>\n<td>8. ME</td>\n<td></td></tr>\n<tr><td></td>\n<td>9. EO</td>\n<td></td></tr></tbody></table>\n<p>Finally we find a longer match.</p>\n<table><thead><tr><th>Input</th>\n<th>Dictionary</th>\n<th>Output</th></tr></thead>\n<tbody><tr><td>OROMEO</td>\n<td>1. O</td>\n<td>1,2,1,3,4</td></tr>\n<tr><td></td>\n<td>2. R</td>\n<td></td></tr>\n<tr><td></td>\n<td>3. M</td>\n<td></td></tr>\n<tr><td></td>\n<td>4. E</td>\n<td></td></tr>\n<tr><td></td>\n<td>5. OR</td>\n<td></td></tr>\n<tr><td></td>\n<td>6. RO</td>\n<td></td></tr>\n<tr><td></td>\n<td>7. OM</td>\n<td></td></tr>\n<tr><td></td>\n<td>8. ME</td>\n<td></td></tr>\n<tr><td></td>\n<td>9. EO</td>\n<td></td></tr></tbody></table>\n<p>“O” is in the dictionary, but so is “OR” which is longer. Is “ORO” in the dictionary? No, so we encode “OR” as “5”, and add “ORO” to the dictionary.</p>\n<table><thead><tr><th>Input</th>\n<th>Dictionary</th>\n<th>Output</th></tr></thead>\n<tbody><tr><td>OMEO</td>\n<td>1. O</td>\n<td>1,2,1,3,4,5</td></tr>\n<tr><td></td>\n<td>2. R</td>\n<td></td></tr>\n<tr><td></td>\n<td>3. M</td>\n<td></td></tr>\n<tr><td></td>\n<td>4. E</td>\n<td></td></tr>\n<tr><td></td>\n<td>5. OR</td>\n<td></td></tr>\n<tr><td></td>\n<td>6. RO</td>\n<td></td></tr>\n<tr><td></td>\n<td>7. OM</td>\n<td></td></tr>\n<tr><td></td>\n<td>8. ME</td>\n<td></td></tr>\n<tr><td></td>\n<td>9. EO</td>\n<td></td></tr>\n<tr><td></td>\n<td>10. ORO</td>\n<td></td></tr></tbody></table>\n<p>Next, we have “O” in the dictionary, but “OM” is there too. Is “OME”? No, so we encode “OM” as “7” and add “OME” to the dictionary.</p>\n<table><thead><tr><th>Input</th>\n<th>Dictionary</th>\n<th>Output</th></tr></thead>\n<tbody><tr><td>EO</td>\n<td>1. O</td>\n<td>1,2,1,3,4,5,7</td></tr>\n<tr><td></td>\n<td>2. R</td>\n<td></td></tr>\n<tr><td></td>\n<td>3. M</td>\n<td></td></tr>\n<tr><td></td>\n<td>4. E</td>\n<td></td></tr>\n<tr><td></td>\n<td>5. OR</td>\n<td></td></tr>\n<tr><td></td>\n<td>6. RO</td>\n<td></td></tr>\n<tr><td></td>\n<td>7. OM</td>\n<td></td></tr>\n<tr><td></td>\n<td>8. ME</td>\n<td></td></tr>\n<tr><td></td>\n<td>9. EO</td>\n<td></td></tr>\n<tr><td></td>\n<td>10. ORO</td>\n<td></td></tr>\n<tr><td></td>\n<td>11. OME</td>\n<td></td></tr></tbody></table>\n<p>Finally, “EO” is in the dictionary so we encode it as “9”, and we’re done.</p>\n<table><thead><tr><th>Input</th>\n<th>Dictionary</th>\n<th>Output</th></tr></thead>\n<tbody><tr><td></td>\n<td>1. O</td>\n<td>1,2,1,3,4,5,7,9</td></tr>\n<tr><td></td>\n<td>2. R</td>\n<td></td></tr>\n<tr><td></td>\n<td>3. M</td>\n<td></td></tr>\n<tr><td></td>\n<td>4. E</td>\n<td></td></tr>\n<tr><td></td>\n<td>5. OR</td>\n<td></td></tr>\n<tr><td></td>\n<td>6. RO</td>\n<td></td></tr>\n<tr><td></td>\n<td>7. OM</td>\n<td></td></tr>\n<tr><td></td>\n<td>8. ME</td>\n<td></td></tr>\n<tr><td></td>\n<td>9. EO</td>\n<td></td></tr>\n<tr><td></td>\n<td>10. ORO</td>\n<td></td></tr>\n<tr><td></td>\n<td>11. OME</td>\n<td></td></tr></tbody></table>\n<p>Encode the next chunk</p>\n<p>It doesn’t look like we did much, and honestly, we didn’t. This is because we used a very short starting string. But imagine we were compressing all of Romeo and Juliet. We would quickly be able to encode “ROMEO” as a single number and use that throughout.</p>\n<p>Since our data is just numbers, we can store that efficiently. Letters are actually stored as numbers; there are different formats for encoding and interpreting them.</p>\n<p>ASCII originally used 7 bits per character, which gives you 2⁷ (128) different numbers. That’s enough to store the uppercase and lowercase letters, the numerals 0-9, the punctuation you have on the top row of a keyboard, and a few other special characters like “carriage return” or new line.</p>\n<p>UTF-8 uses a byte (8 bits or 256 numbers) to store each character. It works for decoding ASCII , but it can also be used to decode Unicode by using up to 4 bytes (32 bits or 4,294,967,296 numbers), although Unicode only specifies 1,112,064 different characters.</p>\n<p>UTF-16 uses 16 bits (2¹⁶ = 65536) to encode. It works with Unicode but not ASCII. These extra numbers can label characters for every language, random symbols, emoji.</p>\n<p>If we wanted to encode (from letters to numbers) Romeo and Juliet written in another alphabet, Chinese for example, we’d need to store each character using a large number - probably in the thousands. But if we applied LZ encoding, we would only be storing numbers from 0 to something under 10,000 I’d guess.</p>","css":{"code":"","map":null},"head":"","readingTime":"6 min read"},{"slug":"soundcloud-likes","title":"soundcloud likes","date":"2022-02-03T00:00:00.000Z","excerpt":"How to archive all your soundcloud likes.","tags":["code","tutorial"],"html":"<p>SoundCloud is notorious for having songs deleted - often by the original uploader. Most of these songs are not easily found elsewhere on the internet. To download them, you can use a very powerful free tool: <a href=\"https://ytdl-org.github.io/youtube-dl/download.html\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">youtube-dl</a></p>\n<p>On Windows, you can just download the exe. If you double-click on the file, it will just have a black window popup and then close; that’s because it’s a command line tool. To use it properly, you can either use the Command Prompt (press the windows key, then type “cmd”), or my preference, PowerShell (windows key, then type “powershell”).</p>\n<p>Now if you drag the exe file onto the terminal and press enter, you’ll see:</p>\n<p><code>Usage: youtube-dl.exe [OPTIONS] URL [URL...]</code></p>\n<p>youtube-dl.exe: error: You must provide at least one URL.\nType youtube-dl —help to see a list of all options.</p>\n<p>That’s because you need to give it a URL to download. In our case, we want to use our SoundCloud Likes playlist. Checkout the huge list of <a href=\"https://ytdl-org.github.io/youtube-dl/supportedsites.html\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">supported sites</a>; basically everything but paid streaming sites like Netflix etc.</p>\n<p>My SoundCloud likes are at <a href=\"https://soundcloud.com/IHTFY/likes\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">https://soundcloud.com/IHTFY/likes</a>, so you would just need to change your user ID.</p>\n<p>Before you do that, where are the files going to be downloaded to? By default, the terminal opens to <code>C:\\Users\\YourName</code>. If you want to download to a different folder, you could make one (or find an existing one) and navigate your terminal to it using the <code>cd</code> command which stands for “change directory”.</p>\n<p>Type <code>cd</code> then add a space and then drag the folder onto the terminal. Press enter, and you’ll see the pwd (present working directory) is now the location of that folder.</p>\n<p>Now, if you were to drag the youtube-dl.exe onto the terminal, add a space, then add the SoundCloud Likes URL, it would start downloading all of your liked songs into that folder.</p>\n<p>There’s a bit more we can do to automate this. We could make a batch file (.bat) that when double-clicked, automatically downloads all of your likes to the specified folder.</p>\n<p>Create a new text file, and name it <code>SCBackup.bat</code></p>\n<p>Add the following code inside the file, replacing <code>SOUNDCLOUD_USERNAME</code> and <code>PATH_TO_YOUR_MUSIC_FOLDER</code>.</p>\n<div class=\"code-block svelte-1w2kx1p\"><div class=\"filename svelte-1w2kx1p\">SCBackup.bat</div>\n\t<div class=\"lang svelte-1w2kx1p\">batch</div>\n\t<pre class=\"language-batch\"><!-- HTML_TAG_START --><code class=\"language-batch\"><span class=\"token operator\">@</span><span class=\"token command\"><span class=\"token keyword\">ECHO</span> OFF</span>\n<span class=\"token command\"><span class=\"token keyword\">SET</span> <span class=\"token variable\">uid</span><span class=\"token operator\">=</span>SOUNDCLOUD<span class=\"token operator\">_</span>USERNAME</span>\n<span class=\"token command\"><span class=\"token keyword\">SET</span> <span class=\"token variable\">dest</span><span class=\"token operator\">=</span>PATH<span class=\"token operator\">_</span>TO<span class=\"token operator\">_</span>YOUR<span class=\"token operator\">_</span>MUSIC<span class=\"token operator\">_</span>FOLDER<span class=\"token variable\">%uid%</span> soundcloud likes</span>\n<span class=\"token command\"><span class=\"token keyword\">ECHO</span> saving in <span class=\"token variable\">%dest%</span></span>\n<span class=\"token command\"><span class=\"token keyword\">SET</span> <span class=\"token variable\">ytStr</span><span class=\"token operator\">=</span>\"<span class=\"token variable\">%dest%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token punctuation\">(</span>uploader</span><span class=\"token punctuation\">)</span>s - %%<span class=\"token punctuation\">(</span><span class=\"token command\"><span class=\"token keyword\">title</span></span><span class=\"token punctuation\">)</span>s <span class=\"token punctuation\">(</span>%%<span class=\"token punctuation\">(</span><span class=\"token command\"><span class=\"token keyword\">id</span></span><span class=\"token punctuation\">)</span>s<span class=\"token punctuation\">)</span>.%%<span class=\"token punctuation\">(</span><span class=\"token command\"><span class=\"token keyword\">ext</span></span><span class=\"token punctuation\">)</span>s\"\n<span class=\"token command\"><span class=\"token keyword\">ECHO</span> <span class=\"token variable\">%ytStr%</span></span>\n<span class=\"token command\"><span class=\"token keyword\">START</span> youtube-dl.exe https://soundcloud.com/<span class=\"token variable\">%uid%</span><span class=\"token parameter attr-name\">/likes</span> <span class=\"token parameter attr-name\">--output</span> <span class=\"token variable\">%ytStr%</span> -ciw</span></code><!-- HTML_TAG_END --></pre>\n</div>\n<p>You also need to change the <code>youtube-dl.exe</code> to the full path of the exe, or you can add <code>youtube-dl</code> to your Windows Path.</p>\n<p>Press Windows key, then type “environment”. You should see “Edit environment variables for your account”. Click that, and it will open up a window with 2 tables. In the top one, User variables, click the <code>Path</code> variable, then click <code>Edit...</code>.</p>\n<p>Next, you want to add the folder that contains the <code>youtube-dl.exe</code> file. Click <code>Browse</code>, and find that folder, then click <code>OK</code> to close each window.</p>\n<p>Now the terminal will be able to find <code>youtube-dl.exe</code>, and you can refer to it without using the full path to the file.</p>\n<p>Now, you can periodically run that file to download your liked songs from SoundCloud. By default, <code>youtube-dl</code> will download from newest to oldest, so once you start seeing </p>\n<blockquote><p>… has already been downloaded</p></blockquote>\n<p>you can stop the script by closing the window. Note, you’ll want to keep all your songs in that folder so that <code>youtube-dl</code> can tell when it’s already downloaded a file; there’s no other history built in.</p>","css":{"code":".code-block.svelte-1w2kx1p.svelte-1w2kx1p{display:block;position:relative;background-color:var(--code-background-color);color:var(--code-text-color);font-family:var(--mono-font);font-size:1rem;line-height:1.33em;border-radius:8px;box-shadow:var(--shadow);padding:30px 15px;margin:30px 0}.code-block.svelte-1w2kx1p pre{overflow-x:auto;scrollbar-color:var(--primary-color) var(--scrollbar-track-color);scrollbar-width:thin;padding-bottom:5px}.code-block.svelte-1w2kx1p pre::-webkit-scrollbar{height:8px}.code-block.svelte-1w2kx1p pre::-webkit-scrollbar-thumb{background:var(--primary-color)}.code-block.svelte-1w2kx1p pre::-webkit-scrollbar-thumb:hover{background:var(--primary-light-color)}.code-block.svelte-1w2kx1p .lang.svelte-1w2kx1p{position:absolute;right:0;top:-15px;background:inherit;border-radius:8px;padding:5px 10px;z-index:2;font-size:0.85em}.code-block.svelte-1w2kx1p .filename.svelte-1w2kx1p{background:inherit;border-top-left-radius:8px;border-top-right-radius:8px;margin-bottom:-2px;padding:5px 10px;position:absolute;left:0px;top:-15px;z-index:1}","map":null},"head":"","readingTime":"4 min read"},{"slug":"youtube-speeds-faster-than-2x","title":"YouTube Speeds Faster Than 2x","date":"2019-06-08T00:00:00.000Z","excerpt":"How to watch YouTube even faster","tags":["code","tutorial"],"html":"<p>I remember speeding up books on tape to chipmunk speeds so I could get through them faster. Today, my podcast app does this without the pitch distortion, and it can even trim out the silent parts.</p>\n<p>YouTube recently added a slider to select a custom speed between 0.25x and 2x at 0.05x increments.</p>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/youtube-speeds-faster-than-2x/slider-1.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/youtube-speeds-faster-than-2x/slider-1.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/youtube-speeds-faster-than-2x/slider-1.png\" alt=\"Custom playback speed slider\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n\t\n\t\t<figcaption><!-- HTML_TAG_START -->Custom playback speed slider<!-- HTML_TAG_END --></figcaption>\n</picture>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/youtube-speeds-faster-than-2x/speed-settings-copy-1.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/youtube-speeds-faster-than-2x/speed-settings-copy-1.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/youtube-speeds-faster-than-2x/speed-settings-copy-1.png\" alt=\"Preset playback speeds\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n\t\n\t\t<figcaption><!-- HTML_TAG_START -->Preset playback speeds<!-- HTML_TAG_END --></figcaption>\n</picture>\n<p>But you can do more. It’s possible to choose any speed between 0x and 16x by changing the value of the video’s <code>playbackRate</code> property.</p>\n<p>I wrote a little JavaScript code that will let you type in whatever speed you want. It works for lots of other sites too, like Netflix, Twitter, and Facebook.</p>\n<h2 id=\"making-a-bookmarklet\">Making a Bookmarklet<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#making-a-bookmarklet\"><span class=\"heading-link\">#</span></a></h2>\n<p>UPDATE: I’ve made <a href=\"https://ihtfy.github.io/JavaScript-Bookmarklets/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">a page</a> that lists some of the bookmarklets I’ve made. The custom video speed is the 1st one.</p>\n<p>First, make a new bookmark. In chrome, you can use <code>ctrl + d</code>. You can do it on any page, but before you click “Done”, click on “More…“.</p>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/youtube-speeds-faster-than-2x/bookmark-2.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/youtube-speeds-faster-than-2x/bookmark-2.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/youtube-speeds-faster-than-2x/bookmark-2.png\" alt=\"Making a bookmark\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n\t\n\t\t<figcaption><!-- HTML_TAG_START -->Making a bookmark<!-- HTML_TAG_END --></figcaption>\n</picture>\n<p>I like the Name to be short so I use this: ⏩</p>\n<p>Then paste the following code into the URL. To copy it, double click anywhere in the code, then use <code>ctrl + c</code>.</p>\n<div class=\"code-block svelte-1w2kx1p\"><div class=\"filename svelte-1w2kx1p\">⏩</div>\n\t<div class=\"lang svelte-1w2kx1p\">javascript</div>\n\t<pre class=\"language-javascript\"><!-- HTML_TAG_START --><code class=\"language-javascript\"><span class=\"token literal-property property\">javascript</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"video\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> videos <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"video\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> currentSpeed <span class=\"token operator\">=</span> videos<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>playbackRate<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> input <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span><span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"How fast?&#92;n0x⟷16.0x\"</span><span class=\"token punctuation\">,</span> currentSpeed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> input <span class=\"token operator\">===</span> <span class=\"token string\">'number'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> input <span class=\"token operator\">!==</span> currentSpeed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      videos<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span> <span class=\"token operator\">=></span> v<span class=\"token punctuation\">.</span>playbackRate <span class=\"token operator\">=</span> input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Can't find a video.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></code><!-- HTML_TAG_END --></pre>\n</div>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/youtube-speeds-faster-than-2x/save-1.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/youtube-speeds-faster-than-2x/save-1.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/youtube-speeds-faster-than-2x/save-1.png\" alt=\"The Name and URL fields\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n\t\n\t\t<figcaption><!-- HTML_TAG_START -->The Name and URL fields<!-- HTML_TAG_END --></figcaption>\n</picture>\n<p>When you’re watching a YouTube video, you can click the bookmarklet you just made, and it will let you type in the speed.</p>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/youtube-speeds-faster-than-2x/use-1.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/youtube-speeds-faster-than-2x/use-1.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/youtube-speeds-faster-than-2x/use-1.png\" alt=\"The final input popup\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n\t\n\t\t<figcaption><!-- HTML_TAG_START -->The final input popup<!-- HTML_TAG_END --></figcaption>\n</picture>\n<h2 id=\"skipping-ads\">Skipping Ads<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#skipping-ads\"><span class=\"heading-link\">#</span></a></h2>\n<p>Here’s another version of the code that just toggles the speed between 1x and 16x. If an ad is playing (even an unskippable one), you can play it at 16x to get through it quickly.</p>\n<p>I use this as the Name: ⏭️</p>\n<p>And here’s the code for the URL:</p>\n<div class=\"code-block svelte-1w2kx1p\"><div class=\"filename svelte-1w2kx1p\">⏭️</div>\n\t<div class=\"lang svelte-1w2kx1p\">javascript</div>\n\t<pre class=\"language-javascript\"><!-- HTML_TAG_START --><code class=\"language-javascript\"><span class=\"token literal-property property\">javascript</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"video\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> videos <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"video\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> currentSpeed <span class=\"token operator\">=</span> videos<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>playbackRate<span class=\"token punctuation\">;</span>\n    videos<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span> <span class=\"token operator\">=></span> v<span class=\"token punctuation\">.</span>playbackRate <span class=\"token operator\">=</span> currentSpeed <span class=\"token operator\">==</span> <span class=\"token number\">16</span> <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Can't find a video.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></code><!-- HTML_TAG_END --></pre>\n</div>\n<p>Here’s another one that has a little meter to show the current speed.</p>\n<div class=\"code-block svelte-1w2kx1p\"><div class=\"filename svelte-1w2kx1p\">⏩</div>\n\t<div class=\"lang svelte-1w2kx1p\">javascript</div>\n\t<pre class=\"language-javascript\"><!-- HTML_TAG_START --><code class=\"language-javascript\"><span class=\"token literal-property property\">javascript</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"video\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> videos <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"video\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> currentSpeed <span class=\"token operator\">=</span> videos<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>playbackRate<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">m</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> <span class=\"token number\">5</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">log2</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> l <span class=\"token operator\">=</span> <span class=\"token string\">\"0    ⅛    ¼    ½    1    2    4    8    16\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">a</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">i</span> <span class=\"token operator\">=></span> l<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token function\">m</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"͟\"</span> <span class=\"token operator\">+</span> l<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token function\">m</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> input <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span><span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token function\">a</span><span class=\"token punctuation\">(</span>currentSpeed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> currentSpeed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> input <span class=\"token operator\">===</span> <span class=\"token string\">'number'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> input <span class=\"token operator\">!==</span> currentSpeed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      videos<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token operator\">=></span>v<span class=\"token punctuation\">.</span>playbackRate <span class=\"token operator\">=</span> input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Can't find a video.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code><!-- HTML_TAG_END --></pre>\n</div>\n<p>Here’s one that just sets the playhead to the end of the video.</p>\n<div class=\"code-block svelte-1w2kx1p\"><div class=\"filename svelte-1w2kx1p\">⏭️</div>\n\t<div class=\"lang svelte-1w2kx1p\">javascript</div>\n\t<pre class=\"language-javascript\"><!-- HTML_TAG_START --><code class=\"language-javascript\"><span class=\"token literal-property property\">javascript</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> v <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"video\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  v<span class=\"token punctuation\">.</span>currentTime <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span>duration<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code><!-- HTML_TAG_END --></pre>\n</div>","css":{"code":"picture.svelte-1gy5t1o.svelte-1gy5t1o{position:relative;width:100%;height:100%}picture.svelte-1gy5t1o img.svelte-1gy5t1o{width:100%;height:100%}\n.code-block.svelte-1w2kx1p.svelte-1w2kx1p{display:block;position:relative;background-color:var(--code-background-color);color:var(--code-text-color);font-family:var(--mono-font);font-size:1rem;line-height:1.33em;border-radius:8px;box-shadow:var(--shadow);padding:30px 15px;margin:30px 0}.code-block.svelte-1w2kx1p pre{overflow-x:auto;scrollbar-color:var(--primary-color) var(--scrollbar-track-color);scrollbar-width:thin;padding-bottom:5px}.code-block.svelte-1w2kx1p pre::-webkit-scrollbar{height:8px}.code-block.svelte-1w2kx1p pre::-webkit-scrollbar-thumb{background:var(--primary-color)}.code-block.svelte-1w2kx1p pre::-webkit-scrollbar-thumb:hover{background:var(--primary-light-color)}.code-block.svelte-1w2kx1p .lang.svelte-1w2kx1p{position:absolute;right:0;top:-15px;background:inherit;border-radius:8px;padding:5px 10px;z-index:2;font-size:0.85em}.code-block.svelte-1w2kx1p .filename.svelte-1w2kx1p{background:inherit;border-top-left-radius:8px;border-top-right-radius:8px;margin-bottom:-2px;padding:5px 10px;position:absolute;left:0px;top:-15px;z-index:1}","map":null},"head":"","readingTime":"7 min read"}]}