{"slug":"chess-engine","title":"Chess Engine","date":"2022-01-15T00:00:00.000Z","excerpt":"Making a chess engine","tags":["code"],"html":"<p>I started making a chess engine a while ago. I only got as far as making random moves.</p>\n<p>Today, I added a basic evaluation function that simply counts the material imbalance. Then it uses mini-max with alpha beta pruning at a depth of 3. It’s still very dumb, and you can win fast with a short tactic.</p>\n<p>I know many chess engines use different evaluation formulas for he midgame and endgame, such as giving greater preference to long range pieces (bishops and rooks). I don’t plan on outperforming stockfish, but I’d like to make an engine that I can’t beat. My online rating is around 1800.</p>\n<p>I learned chess from my dad when I was around 7 years old. He always beat me, and I was never very good, but I always enjoyed the game. My best friend Taylor and I wound play. We nearly alternated wins each game.</p>\n<p>I picked the game up again in the summer of 2020. My blitz rating started at 1400 and dropped to 650. It was a steady climb to 1650 over the course of 9 months. The next 3-6 months, I climbed to around 1750. I mostly do puzzles now since I find them relaxing. I also watch videos - mostly Daniel Naroditsky.</p>\n<p>My reintroduction came after watching the Penguinz0/xQc 6 move checkmate. I watched the remainder of pogchamps, then found Danya’s channel. I definitely recommend it to anyone interested in how to become a better chess player.</p>\n<p>I realized there were so many heuristics I had never considered. I had always worked on pure calculation when I was younger. But it makes sense to slowly expand your pieces, keeping everything defended along the way.</p>\n<p>I had never even thought about playing positionally. I never put rooks on open files without the intention of traveling down the file on the next move. Similarly, I never thought to place my bishops on long diagonals where they may one day have reign across the whole board.</p>","css":{"code":"","map":null},"head":"","readingTime":"2 min read","relatedPosts":[{"slug":"choppy","title":"Choppy","date":"2022-03-28T00:00:00.000Z","excerpt":"I made an unlisted stream about the IQ test generator.","tags":["code"],"html":"<p>I did an <a href=\"https://www.youtube.com/watch?v=QikZC9J3ZkQ\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">unlisted stream</a> talking about Raven’s Progressive Matrices. YouTube was telling me it wasn’t getting enough data for a smooth stream, but the replay doesn’t look too bad.</p>\n<p>I’ll probably keep this unlisted for now. I’ll probably make a public video once there’s a working prototype or finished project.</p>\n<p>My laptop fan was running full blast the whole time. I think I had to disable hardware acceleration to get display capture to work on OBS.</p>","css":{"code":"","map":null},"head":"","readingTime":"1 min read"},{"slug":"schema","title":"Schema","date":"2022-03-26T00:00:00.000Z","excerpt":"I'm working on the IQ test again.","tags":["code","math"],"html":"<p>I’m working on the IQ test again. I’ll have to work on the best way to represent rules, and configuration for different graphics. Basically, I think I will have a 3x3 array, filled with blank config files - maybe they will have indexes and neighbor references. Then I will apply rules to this array, modifying the config files. The config files will be able to define a graphic, like a grid with shapes, nested shapes, dot patterns etc.</p>\n<p>The answer choices will have random parameters tweaked in this process, like modified rule numeric values or starting index.</p>\n<p>The other day, I made a function to return an arbitrary diagonal of a matrix.</p>\n<div class=\"code-block svelte-y16rmy\"><div class=\"filename svelte-y16rmy\">utils.js</div>\n\t<div class=\"lang svelte-y16rmy\">javascript</div>\n\t<pre class=\"language-javascript\"><!-- HTML_TAG_START --><code class=\"language-javascript\"><span class=\"token comment\">/**\n * The range of % is (-n, n). positiveMode restricts the range to [0, n).\n *\n * @param &#123;a value&#125; x\n * @param &#123;the modulus&#125; n\n * @returns x mod n | x ϵ [0,n)\n */</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">positiveMod</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> n</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">%</span> n<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> n<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> n<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Pick a diagonal from a grid.\n *\n * @param &#123;3x3 grid&#125; grid\n * @param &#123;column index of first element&#125; diagonalIndex\n * @param &#123;1: right, -1: left&#125; direction\n * @returns &#123;array of elements in the diagonal, starting at the given index moving down and in the given direction&#125;\n */</span>\n\n<span class=\"token comment\">/**\n * 1 2 3  -1 -2 -3\n * 3 1 2  -2 -3 -1\n * 2 3 1  -3 -1 -2\n */</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getDiagonal</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">grid<span class=\"token punctuation\">,</span> diagonalIndex<span class=\"token punctuation\">,</span> direction</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>diagonalIndex <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tdiagonalIndex <span class=\"token operator\">=</span> <span class=\"token function\">positiveMod</span><span class=\"token punctuation\">(</span>diagonalIndex<span class=\"token punctuation\">,</span> grid<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">const</span> output <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> grid<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\toutput<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token function\">positiveMod</span><span class=\"token punctuation\">(</span>diagonalIndex <span class=\"token operator\">+</span> direction <span class=\"token operator\">*</span> i<span class=\"token punctuation\">,</span> grid<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> output<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></code><!-- HTML_TAG_END --></pre>\n</div>","css":{"code":".code-block.svelte-y16rmy.svelte-y16rmy{display:block;position:relative;background-color:var(--code-background-color);color:var(--code-text-color);font-family:var(--mono-font);font-size:1rem;line-height:1.33em;border-radius:8px;box-shadow:var(--neumorphic-shading-concave), var(--neumorphic-shadow);padding:30px 15px;margin:30px 0}.code-block.svelte-y16rmy pre{overflow-x:auto;scrollbar-color:var(--primary-color) var(--scrollbar-track-color);scrollbar-width:thin;padding-bottom:5px}.code-block.svelte-y16rmy pre::-webkit-scrollbar{height:8px}.code-block.svelte-y16rmy pre::-webkit-scrollbar-thumb{background:var(--primary-color)}.code-block.svelte-y16rmy pre::-webkit-scrollbar-thumb:hover{background:var(--primary-light-color)}.code-block.svelte-y16rmy .filename.svelte-y16rmy{background:inherit;border-radius:8px;margin-bottom:-2px;padding:5px 10px;position:absolute;left:0px;top:-16px;z-index:1;box-shadow:var(--neumorphic-shading-convex), var(--neumorphic-shadow)}.code-block.svelte-y16rmy .lang.svelte-y16rmy{position:absolute;right:0;top:-16px;background:inherit;border-radius:8px;padding:5px 10px;z-index:2;font-size:0.85em;box-shadow:var(--neumorphic-shading-convex), var(--neumorphic-shadow)}","map":null},"head":"","readingTime":"3 min read"},{"slug":"boilerplate","title":"Boilerplate","date":"2022-03-22T00:00:00.000Z","excerpt":"Working on the IQ test generator","tags":["code"],"html":"<p>I started writing the boilerplate code for the IQ test. Didn’t get too much done yet. I’m using Svelte and the community version of MaterializeCSS.</p>","css":{"code":"","map":null},"head":"","readingTime":"1 min read"}]}