{"slug":"overflow","title":"Overflow","date":"2022-02-20T00:00:00.000Z","excerpt":"Working on a Mathologer challenge","tags":["code","math"],"html":"<p>My sleep schedule is basically inverted again. I’m going to try to stay up until tomorrow night.</p>\n<p>I’m a day ahead on my posts; I am enjoying this ability to schedule ahead.</p>\n<p>I was watching <a href=\"https://youtu.be/6ZrO90AI0c8\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">this Mathologer video</a> last night/this morning, and he asks people to create an app to visualize a modular times table. I think I’ll play around with this a bit. <a href=\"https://youtu.be/6ZrO90AI0c8?t=991\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">16:30</a> for the coding challenge.</p>\n<h2 id=\"goal\">Goal<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#goal\"><span class=\"heading-link\">#</span></a></h2>\n<p>A comment from Mathologer:</p>\n<ul><li>Being able to color line segments according to length.</li>\n<li>Being able to highlight different loops in different colors.</li>\n<li>Indication of the “direction” of multiplication. 1x2 = 2 and so there should really be a little arrow from 1 to 2 not just a simple connection</li>\n<li>different loops in different colors.</li></ul>\n<h2 id=\"tools\">Tools<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#tools\"><span class=\"heading-link\">#</span></a></h2>\n<p>I’ll make a web app - probably a PWA, since it’s all client-side and simple to add this functionality.</p>\n<p>I’m going to use SVG rather than HTML canvas in case people want to zoom in on the details. I think I’ll use <a href=\"https://d3js.org/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">D3</a>.</p>\n<p>I might use <a href=\"https://materializecss.com/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">MaterializeCSS</a>, since it has a nice slider. Bulma doesn’t have a slider, though there is an extension for it. Bootstrap could work, but I like the slider in Materialize better. The checkboxes in Materialize have really nice animations, and I think I’ll be using those too to toggle options.</p>\n<p>MaterializeCSS has never upgraded from v1.0.0, and I checked the GitHub page and see that there’s a community edition <a href=\"https://github.com/materializecss/materialize\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">here</a> - Nice! I’ll be using that from now on (Edit: I just noticed their download page still links to the old version, so that’s what I used… I just checked again, and the link is new; I don’t know how I got the old version). I think I want to use the version with the SCSS files so I can customize the colors of the sliders etc, but I’ll need to check how to use a SASS compiler. I’ve haven’t set it up from scratch before. There’s a VSCode extension called Live Sass Compiler that I’ll try out - looks simple.</p>\n<p>I think I’ll download the minified version of the libraries I use and include them in my repository so that offline mode works.</p>\n<p>Another idea: I might have themes for styling: Mathologer (white background), 3Blue1Brown (black background), Numberphile (brown paper background).</p>\n<h2 id=\"setup\">Setup<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#setup\"><span class=\"heading-link\">#</span></a></h2>\n<p>I’ll make a new folder called <code>vortex</code>. I’ll download the latest version of <a href=\"https://materializecss.github.io/materialize/getting-started.html\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">Materialize</a> and <a href=\"https://d3js.org/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">D3</a>. Hmm, the download link for the SASS version of Materialize doesn’t work, so I’ll just get the regular version.</p>\n<p>I’ll make a new html file called <code>index.html</code> and insert the default html from <a href=\"https://materializecss.github.io/materialize/getting-started.html#setup\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">here</a>. I’m going to download those dependencies (icons) later so that everything is offline. I rearranged the file structure a bit, so I updated the relative paths in the <code>src</code> attributes. I’m also putting the <code>&lt;script&gt;</code> tags in the <code>&lt;head&gt;</code> and adding the <code>defer</code> attribute.</p>\n<p>I’ll try adding some <a href=\"https://materializecss.github.io/materialize/range.html\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">sliders</a> to the page to make sure it’s working. Yep, it works.</p>\n<p>Now, I’ll see if D3 is working by doing a “hello world”. I make a file called <code>main.js</code> and add it as a <code>&lt;script&gt;</code> in the <code>index.html</code> head. Then, in <code>main.js</code> I save:</p>\n<p>d3.select(“body”).append(“span”).text(“Hello, world!”);</p>\n<p>It works. I’m going to save this in GitHub, and set up a public page. In VSCode, I can go to Source Control, then “Publish to GitHub”. I’ll make it a public repository called “vortex”. <a href=\"https://github.com/IHTFY/vortex\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">Here it is</a>. To make a page for it on GitHub, I go to Settings &gt; Pages &gt; set Source to Master &gt; Save. Now it’s public at <a href=\"https://ihtfy.github.io/vortex/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">https://ihtfy.github.io/vortex/</a>. To give it a custom URL, I’ll add a file in the root of the project called <code>CNAME</code> with the text <code>vortex.ihtfy.com</code>.</p>\n<p>I also need to set it up in my DNS settings for ihtfy.com. I’ll add a CNAME record with a hostname of <code>vortex.ihtfy.com</code> and use <code>ihtfy.github.io.</code> as the data. Finally, in the GitHub Pages settings, I’ll add <code>vortex.ihtfy.com</code> as a Custom Domain. In a minute or so, I can also enable HTTPS.</p>\n<p>Now, I can start implementing the actual meat of the project.</p>\n<h2 id=\"starting\">Starting<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#starting\"><span class=\"heading-link\">#</span></a></h2>\n<p>The sliders should set values called “multiplier” and “modulus”. I’ll also link them to a number/text input, so you can easily type in a specific number. I just learned about <code>.labels</code>, which <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/labels\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">finds the associated label</a> for an input element.</p>\n<p>I modify the “hello world” a bit to draw a circle:</p>\n<div class=\"code-block svelte-1w2kx1p\"><div class=\"filename svelte-1w2kx1p\">main.js</div>\n\t<div class=\"lang svelte-1w2kx1p\">javascript</div>\n\t<pre class=\"language-javascript\"><!-- HTML_TAG_START --><code class=\"language-javascript\"><span class=\"token keyword\">const</span> svg <span class=\"token operator\">=</span> d3<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#display'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsvg\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'circle'</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cx'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'50%'</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cy'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'50%'</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'r'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">style</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fill'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'none'</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">style</span><span class=\"token punctuation\">(</span><span class=\"token string\">'stroke'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'black'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><!-- HTML_TAG_END --></pre>\n</div>\n<p>I already added an <code>&lt;svg&gt;</code> element to the html file.</p>\n<p>I’ll set a default size for the svg element and play around to get things centered and sized up correctly.</p>\n<p>I’m using Materialize’s grid to make the columns resize as the screen size changes.</p>\n<p>Now, I need to place evenly spaced dots around the circle.</p>\n<h2 id=\"jumping-ahead\">Jumping Ahead<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#jumping-ahead\"><span class=\"heading-link\">#</span></a></h2>\n<p>I forgot I was documenting what I was doing. You can see the history from <a href=\"https://github.com/IHTFY/vortex/commits/master\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">my commits</a>, but it’s probably best to just look at the final code once I’m done.</p>","css":{"code":".code-block.svelte-1w2kx1p.svelte-1w2kx1p{display:block;position:relative;background-color:var(--code-background-color);color:var(--code-text-color);font-family:var(--mono-font);font-size:1rem;line-height:1.33em;border-radius:8px;box-shadow:var(--shadow);padding:30px 15px;margin:30px 0}.code-block.svelte-1w2kx1p pre{overflow-x:auto;scrollbar-color:var(--primary-color) var(--scrollbar-track-color);scrollbar-width:thin;padding-bottom:5px}.code-block.svelte-1w2kx1p pre::-webkit-scrollbar{height:8px}.code-block.svelte-1w2kx1p pre::-webkit-scrollbar-thumb{background:var(--primary-color)}.code-block.svelte-1w2kx1p pre::-webkit-scrollbar-thumb:hover{background:var(--primary-light-color)}.code-block.svelte-1w2kx1p .lang.svelte-1w2kx1p{position:absolute;right:0;top:-15px;background:inherit;border-radius:8px;padding:5px 10px;z-index:2;font-size:0.85em}.code-block.svelte-1w2kx1p .filename.svelte-1w2kx1p{background:inherit;border-top-left-radius:8px;border-top-right-radius:8px;margin-bottom:-2px;padding:5px 10px;position:absolute;left:0px;top:-15px;z-index:1}","map":null},"head":"","readingTime":"6 min read","relatedPosts":[{"slug":"schema","title":"Schema","date":"2022-03-26T00:00:00.000Z","excerpt":"I'm working on the IQ test again.","tags":["code","math"],"html":"<p>I’m working on the IQ test again. I’ll have to work on the best way to represent rules, and configuration for different graphics. Basically, I think I will have a 3x3 array, filled with blank config files - maybe they will have indexes and neighbor references. Then I will apply rules to this array, modifying the config files. The config files will be able to define a graphic, like a grid with shapes, nested shapes, dot patterns etc.</p>\n<p>The answer choices will have random parameters tweaked in this process, like modified rule numeric values or starting index.</p>\n<p>The other day, I made a function to return an arbitrary diagonal of a matrix.</p>\n<div class=\"code-block svelte-1w2kx1p\"><div class=\"filename svelte-1w2kx1p\">utils.js</div>\n\t<div class=\"lang svelte-1w2kx1p\">javascript</div>\n\t<pre class=\"language-javascript\"><!-- HTML_TAG_START --><code class=\"language-javascript\"><span class=\"token comment\">/**\n * The range of % is (-n, n). positiveMode restricts the range to [0, n).\n *\n * @param &#123;a value&#125; x\n * @param &#123;the modulus&#125; n\n * @returns x mod n | x ϵ [0,n)\n */</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">positiveMod</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> n</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">%</span> n<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> n<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> n<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Pick a diagonal from a grid.\n *\n * @param &#123;3x3 grid&#125; grid\n * @param &#123;column index of first element&#125; diagonalIndex\n * @param &#123;1: right, -1: left&#125; direction\n * @returns &#123;array of elements in the diagonal, starting at the given index moving down and in the given direction&#125;\n */</span>\n\n<span class=\"token comment\">/**\n * 1 2 3  -1 -2 -3\n * 3 1 2  -2 -3 -1\n * 2 3 1  -3 -1 -2\n */</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getDiagonal</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">grid<span class=\"token punctuation\">,</span> diagonalIndex<span class=\"token punctuation\">,</span> direction</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>diagonalIndex <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tdiagonalIndex <span class=\"token operator\">=</span> <span class=\"token function\">positiveMod</span><span class=\"token punctuation\">(</span>diagonalIndex<span class=\"token punctuation\">,</span> grid<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">const</span> output <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> grid<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\toutput<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token function\">positiveMod</span><span class=\"token punctuation\">(</span>diagonalIndex <span class=\"token operator\">+</span> direction <span class=\"token operator\">*</span> i<span class=\"token punctuation\">,</span> grid<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> output<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></code><!-- HTML_TAG_END --></pre>\n</div>","css":{"code":".code-block.svelte-1w2kx1p.svelte-1w2kx1p{display:block;position:relative;background-color:var(--code-background-color);color:var(--code-text-color);font-family:var(--mono-font);font-size:1rem;line-height:1.33em;border-radius:8px;box-shadow:var(--shadow);padding:30px 15px;margin:30px 0}.code-block.svelte-1w2kx1p pre{overflow-x:auto;scrollbar-color:var(--primary-color) var(--scrollbar-track-color);scrollbar-width:thin;padding-bottom:5px}.code-block.svelte-1w2kx1p pre::-webkit-scrollbar{height:8px}.code-block.svelte-1w2kx1p pre::-webkit-scrollbar-thumb{background:var(--primary-color)}.code-block.svelte-1w2kx1p pre::-webkit-scrollbar-thumb:hover{background:var(--primary-light-color)}.code-block.svelte-1w2kx1p .lang.svelte-1w2kx1p{position:absolute;right:0;top:-15px;background:inherit;border-radius:8px;padding:5px 10px;z-index:2;font-size:0.85em}.code-block.svelte-1w2kx1p .filename.svelte-1w2kx1p{background:inherit;border-top-left-radius:8px;border-top-right-radius:8px;margin-bottom:-2px;padding:5px 10px;position:absolute;left:0px;top:-15px;z-index:1}","map":null},"head":"","readingTime":"3 min read"},{"slug":"matrices","title":"Matrices","date":"2022-03-20T00:00:00.000Z","excerpt":"Thoughts about Raven's Progressive Matrices","tags":["math","code"],"html":"<p>There’s a type of puzzle called a Raven’s Matrix. It was developed as a type of IQ test, but I remember doing it in elementary school. There’s a free IQ test from Mensa Norway you can try: <a href=\"https://test.mensa.no\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">test.mensa.no</a></p>\n<p>I thought it would be fun to make a web app that generates these matrices. There’s a very basic version I found <a href=\"https://www.caseyrule.com/projects/pattern-puzzle\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">here</a>. Basically just a few shapes, different fill colors, and border styles, and sometimes a nested shape.</p>\n<p><a href=\"https://link.springer.com/content/pdf/10.3758/BRM.42.2.525.pdf\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">This</a> is a paper from Sandia National Labs in 2009 which describes some of the patterns used to create the matrices. The implementation is public <a href=\"https://github.com/LauraMatzen/Matrices\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">here</a>, but it uses an old version of Java and I didn’t feel like getting that to run. It also includes sample output from the program, and you can see it’s not as visually diverse as the Norway test.</p>\n<p>I find these types of puzzles pretty simple once you notice the handful of rules used to create them. Some of the most common things are rotating an element, combining rows/columns, overlaying and applying XOR (exclusive OR, meaning it can’t be both), AND, or some other boolean operation, as well as recognizing when theses rules are combined with each and very often row-shifted.</p>\n<table><thead><tr><th>Straight Down</th>\n<th>Down and Right</th></tr></thead>\n<tbody><tr><td>123</td>\n<td>123</td></tr>\n<tr><td>123</td>\n<td>312</td></tr>\n<tr><td>123</td>\n<td>231</td></tr></tbody></table>\n<p>This shifting can happen vertically or in the opposite direction as well. Notice how the numbers form diagonals rather than columns.</p>\n<p>Another common operation is to simply interpret sub elements in a cell as numbers and then add or subtract them to calculate the cell in the final row/column.</p>\n<p>It would be cool to gather people’s raw scores and then calculate the mean and deviation to be able to normalize it and give an IQ score. I could also give explanations for each puzzle at the end since they’re created with simple rules.</p>\n<table><thead><tr><th>flip horizontally⟶</th>\n<th>rotate 180° ⟶</th>\n<th></th></tr></thead>\n<tbody><tr><td>b</td>\n<td>d</td>\n<td>p</td></tr>\n<tr><td>u</td>\n<td>u</td>\n<td>n</td></tr>\n<tr><td>5</td>\n<td>S</td>\n<td></td></tr></tbody></table>\n<p>For example, this puzzle take the first column, then flips horizontally to get the second column, then rotates 180° to get the final column. So the solution takes “5” flips horizontally to become “S”, then rotates 180° to get “S” again.</p>","css":{"code":"","map":null},"head":"","readingTime":"2 min read"},{"slug":"mandelbrot","title":"Mandelbrot","date":"2022-03-06T00:00:00.000Z","excerpt":"Updating the description of my Mandelbrot fractal viewer","tags":["math","code"],"html":"<p>In my <a href=\"https://frankiemercado.com/2022/01/27/fractal/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">fractal post</a>, I mentioned I need to fix my mandelbrot fractal viewer. I still need to do this; I’d like to get the original paper’s method to work. The current version is based on a shadertoy example which relies on picking a cyclic point as reference.</p>\n<p>I just changed the README on github, because I think I messed up saying 16-bits and 16-digits. I also noticed a source saying one of the 53 bits is actually for signature. I thought that was part of the 11. I think the exponent part is still wrong, but I’m not sure - need to see when things are in base 2 versus 10.</p>\n<p>I kind of gave up on it for a while because <a href=\"http://www.chillheimer.de/kallesfraktaler/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">Kalles Fraktaler</a>, works so much better and faster and includes lots of other optimizations, glitch fixes, and styling options.</p>","css":{"code":"","map":null},"head":"","readingTime":"1 min read"}]}